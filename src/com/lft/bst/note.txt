二叉查找/搜索/排序树 BST（binary search/sort tree）
    或者是一棵空树：
    或者是具有下列性质的二叉树：
    （1）若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值
    （2）若它的右子树上所有结点的值均大于它的根结点的值
    （3）它的左、右子树也分别为二叉排序树

    对这棵树进行中序遍历得到的是一个有序的序列
    二叉查找树的特点：是有规律的，便于添加、便于排序
平衡二叉树（Self-balancing binary search tree）自平衡二叉查找树  又被称为AVL树（有别于AVL算法）
    它是一颗空树
    或 它的左右两个子树的高度差（平衡因子）的绝对值不超过1，
    并且左右两个子树都是一颗平衡二叉树，
    同时，平衡二叉树必定是二叉搜索树，反之则不一定

    平衡因子（平衡度）：结点的平衡因子是结点的左子树的高度减去右子树的高度。（或反之定义）
    平衡二叉树：每个结点的平衡因子都为1、-1、0的二叉排序树。
        或者说每个结点的左右子树的高度最多差1的二叉排序树
    优点：
    平衡二叉树的目的是为了减少二叉查找树层次，提高查找速度
    便于查找

    平衡二叉树的常用实现方法有AVL、红黑树、替罪羊树、Treap、伸展树等

红黑树R-B Tree，全称是Red-Black Tree，又称为“红黑树”，它是一种平衡二叉树。
    红黑树的每个节点上都有存储位表示节点的颜色，可以是红（Red）或黑（Black）

    红黑树的特性：
    （1）每个节点或者是黑色，或者是红色。
    （2）根节点是黑色
    （3）每个叶子结点（NIL）是黑色。【注意：这里叶子结点，是指为空（NIL或NULL）的叶子节点】
    （4）如果一个节点是红色的，则它的子节点必须是黑色的
    （5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点

    注意：
    （01）特性（3）中的叶子节点是指为空（NIL或null）的节点
    （02）特性（5），确保没有一条路径会比其他路径长出两倍。因而，红黑树是相对是接近平衡的二叉树

    红黑树的应用比较广泛，主要是用它来存储有序的数据，它的时间复杂度是O(logN)，效率非常之高
    它虽然是复杂的，但它的最坏情况运行时间也是非常良好的，并且在时间中是最高效的：
        它可以在O(log n)时间内做查找，插入和删除，这里的n是树中元素的数目
    例如，Java集合中的TreeSet和TreeMap，C++STL中的set、map，以及Linux虚拟内存的管理，都是通过红黑树去实现的

B树（balance tree）平衡树
    平衡树（B树）和平衡二叉树有什么差别？
        与平衡二叉树相比是多叉的
        可以减低树的深度，提高查找效率

        B树应文件系统的要求而发展起来的，大量的数据存放在外存中，通常存放在硬盘中
        由于是海量数据，不可能一次调入内存。因此，要多次访问外存。但硬盘的驱动受机械运动的制约，速度慢
        所以主要矛盾变为减少访问外存次数在1972年由R.Bayer和E.Macreight 提出用B_树作为索引组织文件。一稿访问速度、减少时间

B+树
    在B树的基础上，为叶子结点增加链表指针，所有关键字都在叶子节点中出现，非叶子节点作为叶子节点的索引；
    B+树总是到叶子结点才命中

B*树
    是B+树的变体，在B+树的非根和非叶子节点再增加指向兄弟的指针